alias physicalSP S0;
alias sysCallNo S1;
alias currentPID S2;
alias currentPCB S3;
alias p S4;
alias i S5;
alias k S6;
alias nextPCB S7;
alias newphysicalSP S8;
alias waitingPID S9;
alias counter S10;
alias status S11;
alias oldValue S12;
alias pcbStatus S13;
alias j S14;
alias wPid S15;

physicalSP = [PTBR + 2*(SP/512)]*512 + SP%512;
sysCallNo = [physicalSP - 1];

currentPID = (PTBR-1024)/8;
currentPCB = READY_LIST + currentPID*32;


if(sysCallNo == 10 || sysCallNo == 14)then

//................................................
	// WAKING UP ALL OTHER PROCESS WAITING FOR THIS PROCESS
	i = 0;
	while(i<32)do
		oldValue = READY_LIST + i*32 + 1;
		pcbStatus = [oldValue];
		j = 0;
		while([oldValue]!=1 && pcbStatus!=0)do
			wPid = pcbStatus%100;
			if(wPid == currentPID)then
				k = 0;
				p = 1;
				while(k<j)do
					p = p*100;
					k = k + 1;
				endwhile;
				if(currentPID!=0)then
					[oldValue] = [oldValue] - (p*currentPID);
				else
					[oldValue] = [oldValue] - p;
				endif;
				if(j==0 && [oldValue]>31)then
					[oldValue] = [oldValue]/100;
				endif;
			
				alias newVal S14;
				newVal = [oldValue];
				//IF OLD VALUE now IS MULTIPLE OF 100 then SET IT AS 1=>not waiting for any process
				while(newVal!=0)do
					if(newVal%100 == 0)then
						newVal = newVal/100;
					else
						break;
					endif;			
				endwhile;
				if(newVal==0)then
					[oldValue] = 1;
				endif;					
				break;
			else
				pcbStatus = pcbStatus/100;
			endif;
			j = j + 1;
		endwhile;
		i = i + 1;
	endwhile;
//...................................................
endif;

if(sysCallNo == 10) then
	//WAKING DONE ABOVE 


	alias nextProcess S4;
	// FIND NEXT PROCESS TO EXECUTE
	nextProcess = 0;
	while(nextProcess < 32 && [READY_LIST + nextProcess*32 + 1] != 1) do
		nextProcess = nextProcess + 1;
	endwhile;

	if(nextProcess == 32) then
		halt;
	endif;

	
	// CLOSE ALL FILES OPENED BY CURRENT PROCESS	
	alias ppt S4;
	alias SWOFTindex S6;	
	i = 0;
	while(i<8) do
		ppt = currentPCB + 15 + i*2;
		SWOFTindex = [ppt];
		if ( SWOFTindex != -1) then 
			[FILE_TABLE + SWOFTindex*2 + 1] = [FILE_TABLE + SWOFTindex*2 + 1] - 1;
			if ([FILE_TABLE + SWOFTindex*2 + 1] == 0) then
				[FILE_TABLE + SWOFTindex*2] = -1;			// Invalidate the entry if count becomes 0	
			endif;
			
			//Invalidate the PPOFT entries
			[ppt + 0] = -1;			
			[ppt + 1] = -1;
		endif;
		i = i + 1;
	endwhile;

	// TERMINATE STATE
	[currentPCB + 1] = 0;
		
	// FREE PAGES .. UPDATE MEMLIST && DFL
	alias entPTBR S4;
	i = 0;
	while(i<4) do
		entPTBR = PTBR + i*2;
		if([entPTBR + 1]=="01" || [entPTBR + 1]=="11") then
			[MEM_LIST + [entPTBR]] = [MEM_LIST + [entPTBR]] - 1 ;
		else
			if([entPTBR]>=448 && [entPTBR]<=511) then
				[DISK_LIST + [entPTBR]] = [DISK_LIST + [entPTBR]] - 1;
			endif;
		endif;
		[entPTBR + 0] = -1;
		[entPTBR + 1] = "00";
		i = i + 1;
	endwhile;
	store(6,20);				//commit DFL
	// GO BELOW
endif;

if ( sysCallNo == 13) then		//WAIT
	waitingPID = [physicalSP - 3];
//.................................
	i = 0;
	while(i<32)do
		if(waitingPID==-1)then
			if([READY_LIST + i*32]!=currentPID)then
				status = READY_LIST + i*32 + 1;
				[status] = [status]*100 + currentPID;
			endif;
		else
			
			if([READY_LIST + i*32]==waitingPID)then
				status = READY_LIST + i*32 + 1;
				[status] = [status]*100 + currentPID;
				break;
			endif;		
		endif;
		i = i + 1;
	endwhile;	
endif;
//....................................

if(sysCallNo == 14)then		//SIGNAL
	// SAVING THE CONTEXT
	[currentPCB + 1] = 1;
	[currentPCB + 2] = BP;
	[currentPCB + 3] = SP - 1; 
	[currentPCB + 4] = [physicalSP];
	[currentPCB + 5] = PTBR;
	[currentPCB + 6] = PTLR; 
	[currentPCB + 7] = R0; 
	[currentPCB + 8] = R1; 
	[currentPCB + 9] = R2; 
	[currentPCB + 10] = R3; 
	[currentPCB + 11] = R4; 
	[currentPCB + 12] = R5; 
	[currentPCB + 13] = R6; 
	[currentPCB + 14] = R7;
	
	// go to below	
endif;

if(sysCallNo == 10) then
	// SCHEDULER 
	i=0;
	counter = currentPCB + 32;
	if(counter == READY_LIST + 1024) then
		counter = READY_LIST;
	endif;
	while(i<=32) do
		if([counter + 1] == 1) then 
			nextPCB = counter;		
			break;
 		endif;
		if(counter == (READY_LIST + 992)) then
			counter = READY_LIST;
		else
			counter = counter + 32;
		endif;		
		i = i+1;
	endwhile;

	BP = [nextPCB + 2];
	SP = [nextPCB + 3];
	PTBR = [nextPCB + 5];
	PTLR = 4;
	R0 = [nextPCB + 7];
	R1 = [nextPCB + 8];	
	R2 = [nextPCB + 9];	
	R3 = [nextPCB + 10];
	R4 = [nextPCB + 11];
	R5 = [nextPCB + 12];
	R6 = [nextPCB + 13];
	R7 = [nextPCB + 14];
	SP = SP + 1;
	newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
	[newphysicalSP] = [nextPCB + 4];          // IP field value of PCB on the stack 
	[nextPCB + 1] = 2;
endif;		
[physicalSP - 2] = 0;
ireturn;
