alias physicalSP S0;
alias sysCallNo S1;
alias freePCB S2;
alias validPageCount S3;
alias i S4;
alias freePage S5;
alias childPTBR S6;
alias parentStack S7;
alias childPCB S8;
alias parentPID S9;
alias parentPCB S10;
alias SWOFTindex S11;
alias childPhysicalSP S12;
alias checkPTBR S13;
alias EntryCount S14;
alias j S15;

physicalSP = ([PTBR + 2*(SP/512)]*512) + (SP % 512);
sysCallNo = [physicalSP - 1];
		
parentPID = (PTBR - 1024)/8;
parentPCB = READY_LIST + parentPID*32;

if(sysCallNo == 8) then
	
	//GET FREE PCB FOR CHILD (FREE PCB => STATE 0 - terminated/no process )
	freePCB = 0;
	while( [READY_LIST +  freePCB*32 + 1] != 0  && freePCB<32) do
		freePCB = freePCB + 1;
	endwhile;
	if(freePCB == 32) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	childPCB = READY_LIST + freePCB*32;
	[childPCB + 0] = freePCB;   			 // childPID = freePCB (in real OS not so)

	//....CHECK MEMLIST FOR 1 FREE PAGE(CHILD STACK)....
	freePage = 26;
	while(freePage<64 && [MEM_LIST + freePage]!=0) do
		freePage = freePage + 1;
	endwhile;
	if(freePage>=64) then
		//.........PAGE REPLACEMENT ALGORITHM => Second Chance Algorithm	
		checkPTBR = PTBR + 8;
		i=0;		
		j = 0;				
		while(1==1) do			// Max 2 rounds
			while(i!=3) do
				if([MEM_LIST + [checkPTBR + i*2]]<=1 &&	[checkPTBR + i*2 + 1] == "01") then
					freePage = [checkPTBR + i*2];
					j = 1;
					break;
				endif;	
				if([checkPTBR + i*2 + 1] == "11") then
					[checkPTBR + i*2 + 1] = "01";
				endif;	
				i = i + 1;
			endwhile;
			if(j==1)then
				break;
			endif;
			if(checkPTBR == 1272)then
				checkPTBR = PAGE_TABLE;
			else
				checkPTBR = checkPTBR + 8;
			endif;
			i = 0;
		endwhile;
		
		
		//.....SEARCH THE SWAP AREA FOR FREE BLOCK...
		j = 448;
		while(j<512 && [DISK_LIST + j]!=0) do
			j = j + 1;
		endwhile;
		if(j==512) then					// SWAP AREA FULL4
			SP = SP + 1; // Put syscall number
			physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
			[physicalSP] = 10;
			inline "JMP 11776";
		else
			store(freePage,j);
			[DISK_LIST + j] = 1;
			store(6,20);

			[checkPTBR + i*2 + 0] = j;			// Update Victim Page entry in PT with disk block number
			[checkPTBR + i*2 + 1] = "00";
		endif;
	endif;
	
	//...UPDATE MEMLIST....
	[MEM_LIST + freePage] = 1;

	//.. COPY PARENTS STACK TO CHILD..
	parentStack = [PTBR + 3*2]; 
	i = 0;
	while(i<512) do
		[512*freePage + i] = [512*parentStack + i];
		i = i + 1;
	endwhile;

	//...SET UP CHILD THE PAGE TABLE...
	childPTBR = 1024 + freePCB*8;

	i = 0;			
	while(i<3) do				
		[childPTBR + i*2 + 0] = [PTBR + i*2 + 0];
		[childPTBR + i*2 + 1] = [PTBR + i*2 + 1];

		if ([PTBR + i*2 + 1] == "01" || [PTBR + i*2 + 1] == "11") then					
			[MEM_LIST + [PTBR + i*2]] = [MEM_LIST + [PTBR + i*2]] + 1;	
		else
			if ([PTBR + i*2] >=448 && [PTBR + i*2]<=511) then           // disk block in swap area
				[DISK_LIST + [PTBR + i*2]] = [DISK_LIST + [PTBR + i*2]] + 1;
			endif;
		endif;
		i = i + 1;
	endwhile;
	[childPTBR + 3*2 + 0] = freePage;			// set up child stack
	[childPTBR + 3*2 + 1] = "01";

	store(6,20); 						// commit DFL back


	//UPDATE CHILD PCB	
	[childPCB + 0] = freePCB;
	[childPCB + 1] = 1;	            // child is ready.
	[childPCB + 2] = BP;
	[childPCB + 3] = SP - 1;	    // (Why?)
	[childPCB + 4] = [physicalSP];      // logical IP
	[childPCB + 5] = childPTBR;
	[childPCB + 6] = PTLR;
	[childPCB + 7] = R0;
	[childPCB + 8] = R1;
	[childPCB + 9] = R2;
	[childPCB + 10] = R3;
	[childPCB + 11] = R4;
	[childPCB + 12] = R5;
	[childPCB + 13] = R6;
	[childPCB + 14] = R7;
	[childPCB + 31] = parentPID;		// extra
		
	i = 0;
	while(i < 8) do
		[childPCB + 15 + i*2 + 0] = [parentPCB + 15 + i*2 + 0];
		[childPCB + 15 + i*2 + 1] = [parentPCB + 15 + i*2 + 1];

		SWOFTindex = [parentPCB + 15 + i*2];
		if(SWOFTindex != -1) then
			[FILE_TABLE + SWOFTindex*2 + 1] = [FILE_TABLE + SWOFTindex*2 + 1] + 1;
		endif;
		i = i + 1;
	endwhile;				
			
	[physicalSP - 2] = freePCB;                                      // return parent childPID
	childPhysicalSP = [childPTBR + 2*((SP -1)/512)]*512 + (SP-1)%512; 
	[childPhysicalSP - 1] = -2;
	ireturn;
endif;	


			
		



	
		
