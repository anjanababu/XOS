alias current_PID S0;
alias current_PCB S1;
alias physicalSP S2;
alias newPCB S3;
alias counter S4;
alias i S5;
alias newphysicalSP S6;

physicalSP = ([PTBR + 2*(SP/512)]*512 + SP % 512);
current_PID = (PTBR - 1024)/8;
current_PCB = READY_LIST + 32 * current_PID;

//SAVING THE CONTEXT
[current_PCB + 1] = 1; //When TIMER schedules another process for execution, this process will be ready and waiting for the CPU. 
[current_PCB + 2] = BP;
[current_PCB + 3] = SP - 1;
[current_PCB + 4] = [physicalSP]; // Save IP of current process in the PCB from the stack
[current_PCB + 5] = PTBR;
[current_PCB + 6] = PTLR; 
[current_PCB + 7] = R0;
[current_PCB + 8] = R1;
[current_PCB + 9] = R2;
[current_PCB + 10] = R3;
[current_PCB + 11] = R4;
[current_PCB + 12] = R5;
[current_PCB + 13] = R6;
[current_PCB + 14] = R7;

i=0;
counter = current_PCB + 32;
if(counter == READY_LIST + 32*32) then
	counter = READY_LIST;
endif;
while(i<=32) do
	if([counter + 1] == 1) then 
		newPCB = counter;		
		break;
 	endif;
	if(counter == (READY_LIST + 32*31)) then
		counter = READY_LIST;
	else
		counter = counter + 32;
	endif;		
	i = i+1;
endwhile;

//CONTEXT SWITCH
BP=[newPCB+2];
SP=[newPCB+3];
R0=[newPCB+7];
R1=[newPCB+8];
R2=[newPCB+9];
R3=[newPCB+10];
R4=[newPCB+11];
R5=[newPCB+12];
R6=[newPCB+13];
R7=[newPCB+14];
PTBR=[newPCB+5];
PTLR=[newPCB+6];
[newPCB + 1] = 2; // Set STATE to RUNNING

SP=SP + 1;
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[newphysicalSP] = [newPCB + 4]; // Stores IP field value of PCB on the stack 
ireturn;
